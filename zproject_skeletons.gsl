#   Generate skeletons for classes, actors, and mains
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

##  Generate main source if not already present

.directory.create ('src')

.macro skeleton_main_source
. if !file.exists (main.source)
.   echo "Generating skeleton for $(main.source)"
.   output main.source
/*  =========================================================================
    $(main.name:c) - $(string.trim (main.?'description'):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(main.name:c) - $(string.trim (main.?''):no,left)
@discuss
@end
*/

#include "$(project.prefix)_classes.h"

int main(int argc, char *argv [])
{
    bool verbose = false;
    int argn;
    for (argn = 1; argn < argc; argn++) {
        if (streq(argv [argn], "--help")
        ||  streq(argv [argn], "-h")) {
            puts("$(main.name) [options] ...");
            puts("  --verbose / -v         verbose test output");
            puts("  --help / -h            this information");
            return 0;
        }
        else
        if (streq(argv [argn], "--verbose")
        ||  streq(argv [argn], "-v"))
            verbose = true;
        else {
            printf("Unknown option: %s\\n", argv [argn]);
            return 1;
        }
    }
    //  Insert main code here
    if (verbose)
        printf("$(main.name:c) - $(string.trim (main.?''):no,left)");
    return 0;
}
.   close
. endif
.endmacro


##  Generate actor header and source if not already present

.macro skeleton_actor_header
. if !file.exists (actor.header)
.   echo "Generating skeleton for $(actor.header)"
.   output actor.header
/*  =========================================================================
    $(actor.name:c) - $(string.trim (actor.?''):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(ACTOR.NAME:c)_H_INCLUDED
#define $(ACTOR.NAME:c)_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

.   if actor.scope = "private"
typedef struct _$(actor.name:c)_t $(actor.name:c)_t;
.   endif

//  @interface
//  Create new $(actor.name:c) actor instance.
//  @TODO: Describe the purpose of this actor!
//
//      zactor_t *$(actor.name:c) = zactor_new ($(actor.name:c), NULL);
//
//  Destroy $(actor.name:c) instance.
//
//      zactor_destroy (&$(actor.name:c));
//
//  Enable verbose logging of commands and activity:
//
//      zstr_send ($(actor.name:c), "VERBOSE");
//
//  Start $(actor.name:c) actor.
//
//      zstr_sendx ($(actor.name:c), "START", NULL);
//
//  Stop $(actor.name:c) actor.
//
//      zstr_sendx ($(actor.name:c), "STOP", NULL);
//
//  This is the $(actor.name:c) constructor as a zactor_fn;
$(PROJECT.PREFIX)_EXPORT void
    $(actor.name:c)_actor (zsock_t *pipe, void *args);

//  Self test of this actor
$(PROJECT.PREFIX)_EXPORT void
    $(actor.name:c)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.   close
. endif
.endmacro

.macro skeleton_actor_source
. if !file.exists (actor.source)
.   echo "Generating skeleton for $(actor.source)"
.   output actor.source
/*  =========================================================================
    $(actor.name:c) - $(string.trim (actor.?''):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(actor.name:c) - $(string.trim (actor.?''):no,left)
@discuss
@end
*/

#include "$(project.prefix)_classes.h"

//  Structure of our actor

struct _$(actor.name:c)_t {
    zsock_t *pipe;              //  Actor command pipe
    zpoller_t *poller;          //  Socket poller
    bool terminated;            //  Did caller ask us to quit?
    bool verbose;               //  Verbose logging enabled?
    //  TODO: Declare properties
};


//  --------------------------------------------------------------------------
//  Create a new $(actor.name:c) instance

static $(actor.name:c)_t *
$(actor.name:c)_new (zsock_t *pipe, void *args)
{
    $(actor.name:c)_t *self = ($(actor.name:c)_t *) zmalloc (sizeof ($(actor.name:c)_t));
    assert (self);

    self->pipe = pipe;
    self->terminated = false;
    self->poller = zpoller_new (self->pipe, NULL);

    //  TODO: Initialize properties

    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(actor.name:c) instance

static void
$(actor.name:c)_destroy ($(actor.name:c)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(actor.name:c)_t *self = *self_p;

        //  TODO: Free actor properties

        //  Free object itself
        zpoller_destroy (&self->poller);
        free (self);
        *self_p = NULL;
    }
}


//  Start this actor. Return a value greater or equal to zero if initialization
//  was successful. Otherwise -1.

static int
$(actor.name:c)_start ($(actor.name:c)_t *self)
{
    assert (self);

    //  TODO: Add startup actions

    return 0;
}


//  Stop this actor. Return a value greater or equal to zero if stopping 
//  was successful. Otherwise -1.

static int
$(actor.name:c)_stop ($(actor.name:c)_t *self)
{
    assert (self);

    //  TODO: Add shutdown actions

    return 0;
}


//  Here we handle incoming message from the node

static void
$(actor.name:c)_recv_api ($(actor.name:c)_t *self)
{
    //  Get the whole message of the pipe in one go
    zmsg_t *request = zmsg_recv (self->pipe);
    if (!request)
       return;        //  Interrupted

    char *command = zmsg_popstr (request);
    if (streq (command, "START"))
        $(actor.name:c)_start (self);
    else
    if (streq (command, "STOP"))
        $(actor.name:c)_stop (self);
    else
    if (streq (command, "VERBOSE"))
        self->verbose = true;
    else
    if (streq (command, "$TERM"))
        //  The $TERM command is send by zactor_destroy() method
        self->terminated = true;
    else {
        zsys_error ("invalid command '%s'", command);
        assert (false);
    }
    zstr_free (&command);
    zmsg_destroy (&request);
}


//  --------------------------------------------------------------------------
//  This is the actor which runs in its own thread.

void
$(actor.name:c)_actor (zsock_t *pipe, void *args)
{
    $(actor.name:c)_t * self = $(actor.name:c)_new (pipe, args);
    if (!self)
        return;          //  Interrupted

    //  Signal actor successfully initiated
    zsock_signal (self->pipe, 0);

    while (!self->terminated) {
        zsock_t *which = (zsock_t *) zpoller_wait (self->poller, 0);
        if (which == self->pipe)
            $(actor.name:c)_recv_api (self);
       //  Add other sockets when you need them.
    }
    $(actor.name:c)_destroy (&self);
}

.   if actor.selftest
//  --------------------------------------------------------------------------
//  Self test of this actor.

void
$(actor.name:c)_test (bool verbose)
{
    printf (" * $(actor.name:c): ");
    //  @selftest
    //  Simple create/destroy test
    zactor_t *$(actor.name:c) = zactor_new ($(actor.name:c)_actor, NULL);

    zactor_destroy (&$(actor.name:c));
    //  @end

    printf ("OK\\n");
}
.   endif
.   close
. endif
.endmacro


##  Generate class header and source if not already present

.macro skeleton_class_header
. if !file.exists (class.header)
.   echo "Generating skeleton for $(class.header)"
.   output class.header
/*  =========================================================================
    $(class.c_name) - $(string.trim (class.?'class description'):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(CLASS.C_NAME)_H_INCLUDED
#define $(CLASS.C_NAME)_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

.   if class.c_name = project.name
//  Include the library file with typdefs, public includes and public constants
#include "$(class.c_name)_library.h"

.   endif
.   if class.scope = "private"
typedef struct _$(class.c_name) $(class.c_name);

.   endif
//  @interface
//  Create a new $(class.c_name)
$(PROJECT.PREFIX)_EXPORT $(class.c_name) *
    $(class.c_name)_new(void);

//  Destroy the $(class.c_name)
$(PROJECT.PREFIX)_EXPORT void
    $(class.c_name)_destroy($(class.c_name) **self_p);

.   if class.selftest
//  Self test of this class
$(PROJECT.PREFIX)_EXPORT void
    $(class.c_name)_test(bool verbose);
.   endif

//  @end

#ifdef __cplusplus
}
#endif

#endif
.   close
. endif
.endmacro

.macro skeleton_class_source
. if !file.exists (class.source)
.   echo "Generating skeleton for $(class.source)"
.   output class.source
/*  =========================================================================
    $(class.c_name) - $(string.trim (class.?'class description'):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.c_name) - $(string.trim (class.?''):no,left)
@discuss
@end
*/

#include "$(project.prefix)_classes.h"

//  Structure of our class

struct _$(class.c_name) {
    int filler;     //  Declare class properties here
};


//  --------------------------------------------------------------------------
//  Create a new $(class.c_name)

$(class.c_name) *
$(class.c_name)_new(void)
{
    $(class.c_name) *self = ($(class.c_name) *) jmalloc(sizeof ($(class.c_name)));
    assert(self);
    //  Initialize class properties here
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.c_name)

void
$(class.c_name)_destroy($(class.c_name) **self_p)
{
    assert(self_p);
    if (*self_p) {
        $(class.c_name) *self = *self_p;
        //  Free class properties here
        //  Free object itself
        free(self);
        *self_p = NULL;
    }
}

.   if class.selftest
//  --------------------------------------------------------------------------
//  Self test of this class

void
$(class.c_name)_test (bool verbose)
{
    puts(" * $(class.c_name): ");

    //  @selftest
    //  Simple create/destroy test
    $(class.c_name) *self = $(class.c_name)_new();
    assert (self);
    $(class.c_name)_destroy(&self);
    //  @end
    puts("OK\\n");
}
.   endif
.   close
. endif
.endmacro
