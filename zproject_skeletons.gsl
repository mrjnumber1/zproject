#   Generate skeletons for classes, actors, and mains
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

##  Generate main source if not already present

.directory.create ('src')

.macro skeleton_main_source
. if !file.exists (main.source)
.   echo "Generating skeleton for $(main.source)"
.   output main.source
/*  =========================================================================
    $(main.name:c) - $(string.trim (main.?'description'):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(main.name:c) - $(string.trim (main.?''):no,left)
@discuss
@end
*/

#include "$(project.prefix)_classes.h"

int main(int argc, char *argv [])
{
    bool verbose = false;
    int argn;
    for (argn = 1; argn < argc; argn++) {
        if (streq(argv [argn], "--help")
        ||  streq(argv [argn], "-h")) {
            puts("$(main.name) [options] ...");
            puts("  --verbose / -v         verbose test output");
            puts("  --help / -h            this information");
            return 0;
        }
        else
        if (streq(argv [argn], "--verbose")
        ||  streq(argv [argn], "-v"))
            verbose = true;
        else {
            printf("Unknown option: %s\\n", argv [argn]);
            return 1;
        }
    }
    //  Insert main code here
    if (verbose)
        printf("$(main.name:c) - $(string.trim (main.?''):no,left)");
    return 0;
}
.   close
. endif
.endmacro



##  Generate class header and source if not already present

.macro skeleton_class_header
. if !file.exists (class.header)
.   echo "Generating skeleton for $(class.header)"
.   output class.header
/*  =========================================================================
    $(class.c_name) - $(string.trim (class.?'class description'):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(CLASS.C_NAME)_H_INCLUDED
#define $(CLASS.C_NAME)_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

.   if class.c_name = project.name
//  Include the library file with typdefs, public includes and public constants
#include "$(class.c_name)_library.h"

.   endif
.   if class.scope = "private"
typedef struct _$(class.c_name) $(class.c_name);

.   endif
//  Create a new $(class.c_name)
$(class.c_name) *
    $(class.c_name)_new(void);

//  Destroy the $(class.c_name)
void
    $(class.c_name)_destroy($(class.c_name) **self_p);

.   if class.selftest
//  Self test of this class
void
    $(class.c_name)_test(bool verbose);
.   endif


#ifdef __cplusplus
}
#endif

#endif
.   close
. endif
.endmacro

.macro skeleton_class_source
. if !file.exists (class.source)
.   echo "Generating skeleton for $(class.source)"
.   output class.source
/*  =========================================================================
    $(class.c_name) - $(string.trim (class.?'class description'):no,left)

.   for project.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.c_name) - $(string.trim (class.?''):no,left)
@discuss
@end
*/

#include "$(project.prefix)_classes.h"

//  Structure of our class

struct _$(class.c_name) {
.if defined(class.parent)
	union {
		$(class.parent_type)* $(class.parent);
	};
.endif
    int filler;     //  Declare class properties here
};


//  --------------------------------------------------------------------------
//  Create a new $(class.c_name)

$(class.c_name) *
$(class.c_name)_new(void)
{
    $(class.c_name) *self = ($(class.c_name) *) jmalloc(sizeof ($(class.c_name)));
    assert(self);
    //  Initialize class properties here
.if defined(class.parent)
	$(class.parent_type)* parent = $(class.parent_type)_new();
	
	assert(parent)
	
	self->$(class.parent) = parent;
.endif
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.c_name)

void
$(class.c_name)_destroy($(class.c_name) **self_p)
{
    assert(self_p);
    if (*self_p) {
        $(class.c_name) *self = *self_p;
        //  Free class properties here
.if defined(class.parent)

	$(class.parent_type)_destroy(&(self->$(class.parent)));	
	self->$(class.parent) = NULL;
.endif

        //  Free object itself
        free(self);
        *self_p = NULL;
    }
}

.   if class.selftest
//  --------------------------------------------------------------------------
//  Self test of this class

void
$(class.c_name)_test (bool verbose)
{
    puts(" * $(class.c_name): ");

    //  @selftest
    //  Simple create/destroy test
    $(class.c_name) *self = $(class.c_name)_new();
    assert (self);
    $(class.c_name)_destroy(&self);
    //  @end
    puts("OK!\\n");
}
.   endif
.   close
. endif
.endmacro
